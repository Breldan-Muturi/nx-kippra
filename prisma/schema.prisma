// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrganizationRole {
  OWNER
  MEMBER
}

enum Delivery {
  ON_PREMISE
  ONLINE
  BOTH_MODES
}

enum SponsorType {
  SELF_SPONSORED
  ORGANIZATION
}

enum Citizenship {
  KENYAN
  EAST_AFRICAN
  GLOBAL
}

enum Identification {
  NATIONAL_ID
  PASSPORT
}

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  phoneNumber           String?
  role                  UserRole                 @default(USER)
  citizenship           Citizenship              @default(KENYAN)
  identification        Identification           @default(NATIONAL_ID)
  nationalId            String?                  @unique
  county                String?
  occupation            String?
  userOrganization      String?
  address               String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  organizations         UserOrganization[]
  applications          ApplicationParticipant[]
  ownedApplications     Application[]
  CreatedCompletions    CompletedProgram[]       @relation("CreatedCompletions")
  CompletedPrograms     CompletedProgram[]       @relation("CompletedPrograms")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum CompletionStatus {
  PENDING
  APPROVED
  REJECTED
}

model CompletedProgram {
  id        String  @id @default(cuid())
  // Relation to the program
  programId String
  program   Program @relation(fields: [programId], references: [id])

  completionEvidence String[]
  completionDate     DateTime
  status             CompletionStatus @default(PENDING)

  // Relation to the user for this completed program
  participantId String
  participant   User   @relation("CompletedPrograms", fields: [participantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  // Relation to the creator of this record
  creatorId String
  creator   User   @relation("CreatedCompletions", fields: [creatorId], references: [id])

  @@unique([programId, participantId])
}

model Program {
  id             String   @id @default(cuid())
  imgUrl         String?
  code           String   @unique
  summary        String?
  title          String   @unique
  serviceId      Int?
  serviceIdUsd   Int?
  moodleCourseId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()

  // Fields for prerequisites
  prerequisites Program[] @relation("ProgramPrerequisites")
  requiredFor   Program[] @relation("ProgramPrerequisites")

  trainingSessions TrainingSession[]
  topics           Topic[]
  CompletedProgram CompletedProgram[]
}

model Topic {
  id        String   @id @default(cuid())
  title     String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  programId String
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

enum Venue {
  KISUMU
  MOMBASA
  NAIVASHA
  MACHAKOS
  NAKURU
  NAIROBI
}

model TrainingSession {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  venue     Venue?   @default(NAIROBI)
  mode      Delivery @default(ON_PREMISE)

  // Ksh fees
  citizenFee                 Int?
  citizenOnlineFee           Int?
  eastAfricaFee              Int?
  eastAfricaOnlineFee        Int?
  globalParticipantFee       Int?
  globalParticipantOnlineFee Int?

  // Usd fees
  usdCitizenFee                 Int?
  usdCitizenOnlineFee           Int?
  usdEastAfricaFee              Int?
  usdEastAfricaOnlineFee        Int?
  usdGlobalParticipantFee       Int?
  usdGlobalParticipantOnlineFee Int?

  // Handle Slots
  onlineSlots         Int?
  onlineSlotsTaken    Int? @default(0)
  onPremiseSlots      Int?
  onPremiseSlotsTaken Int? @default(0)

  // Handle Relationships
  programId    String
  program      Program       @relation(fields: [programId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Organization {
  id                 String                   @id @default(cuid())
  name               String                   @unique
  phone              String                   @unique
  email              String                   @unique
  image              String?
  county             String
  address            String
  invites            InviteOrganization[]
  contactPersonName  String                   @default("Breldan Muturi")
  contactPersonEmail String                   @default("breldan@sohnandsol.com")
  users              UserOrganization[]
  applications       Application[]
  participants       ApplicationParticipant[]
}

model UserOrganization {
  userId         String
  organizationId String
  role           OrganizationRole

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

model InviteOrganization {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  token          String   @unique
  createdAt      DateTime @default(now())
  expires        DateTime

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  COMPLETED
}

model Application {
  id                String                      @id @default(cuid())
  delivery          Delivery                    @default(ON_PREMISE)
  sponsorType       SponsorType                 @default(SELF_SPONSORED)
  organizationId    String?
  organization      Organization?               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  participants      ApplicationParticipant[]
  trainingSessionId String
  trainingSession   TrainingSession             @relation(fields: [trainingSessionId], references: [id])
  ownerId           String
  owner             User                        @relation(fields: [ownerId], references: [id])
  applicationFee    Int
  currency          String?                     @default("KES")
  status            ApplicationStatus           @default(PENDING)
  proformaInvoice   ApplicationProformaInvoice?
  offerLetter       ApplicationOfferLetter?
  slotsCitizen      Int                         @default(0)
  slotsEastAfrican  Int                         @default(0)
  slotsGlobal       Int                         @default(0)
  payment           Payment[]
  invoice           Invoice[]
}

model ApplicationParticipant {
  id                  String        @id @default(cuid())
  email               String
  name                String
  citizenship         String
  nationalId          String
  organizationName    String
  attendanceConfirmed Boolean       @default(false)
  // Links to the application
  applicationId       String
  application         Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  // Optional, links to a registered user
  userId              String?
  user                User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Optional, links an organization to the participant
  organizationId      String?
  organization        Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ApplicationProformaInvoice {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  fileName      String
  filePath      String
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationOfferLetter {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  fileName      String
  filePath      String
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationConfirmationToken {
  id                String   @id @default(cuid())
  email             String
  token             String   @unique
  expires           DateTime
  trainingSessionId String

  @@unique([email, token])
}

enum InvoiceStatus {
  PENDING
  SETTLED
}

model Invoice {
  id            String        @id @default(cuid())
  applicationId String
  invoiceNumber String        @unique
  invoiceLink   String        @unique
  invoiceEmail  String
  invoiceStatus InvoiceStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Payment {
  id                  String             @id @default(cuid())
  applicationId       String
  application         Application        @relation(fields: [applicationId], references: [id])
  status              String
  secure_hash         String
  phone_number        String
  payment_references  PaymentReference[]
  payment_date        DateTime
  payment_channel     String
  last_payment_amount Float
  invoice_number      String
  invoice_amount      Float
  currency            String
  client_invoice_ref  String
  amount_paid         Float
  paymentReceipt      PaymentReceipt?
}

model PaymentReference {
  id                String   @id @default(cuid())
  paymentId         String
  payment           Payment  @relation(fields: [paymentId], references: [id])
  payment_reference String
  payment_date      DateTime
  inserted_at       DateTime
  currency          String
  amount            Float
}

model PaymentReceipt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  fileName  String
  filePath  String
  paymentId String   @unique
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model CompletedPrograms {
  id String  @id @default(cuid())
  completionDate  DateTime @default(now())
  completionEvidence String[]
  programId String
  program   Program  @relation(fields: [programId], references: [id])
  participantId  String
  participant String
  status String
  creatorId String
  creator User @relation(fields: [creatorId], references: [id])
  modifiedDate DateTime
  createdAt DateTime @default(now())
}